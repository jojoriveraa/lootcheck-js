{"version":3,"sources":["components/Wallet.js","actions/balance.js","actions/constants.js","components/App.js","reducers/balance.js","index.js"],"names":["Wallet","updateBalance","event","setState","balance","parseInt","target","value","deposit","props","state","withdraw","undefined","className","this","onChange","onClick","Component","connect","type","withdrawal","App","action","read_cookie","bake_cookie","store","createStore","rootReducer","render","document","getElementById"],"mappings":"+NAIaA,EAAb,YACE,aAAe,IAAD,8BACZ,+CAIFC,cAAgB,SAAAC,GAAK,OACnB,EAAKC,SAAS,CAAEC,QAASC,SAASH,EAAMI,OAAOC,UANnC,EAQdC,QAAU,kBAAM,EAAKC,MAAMD,QAAQ,EAAKE,MAAMN,UARhC,EAUdO,SAAW,kBAAM,EAAKF,MAAME,SAAS,EAAKD,MAAMN,UAR9C,EAAKM,MAAQ,CAAEN,aAASQ,GAFZ,EADhB,sEAcI,OACE,6BACE,wBAAIC,UAAU,WAAd,mBAAyCC,KAAKL,MAAML,SACpD,6BACA,2BAAOS,UAAU,eAAeE,SAAUD,KAAKb,gBAC/C,4BAAQY,UAAU,cAAcG,QAASF,KAAKN,SAA9C,WAGA,4BAAQK,UAAU,eAAeG,QAASF,KAAKH,UAA/C,iBAtBR,GAA4BM,aA8BbC,eACb,SAAAR,GACE,MAAO,CAAEN,QAASM,KAEpB,CAAEF,QC7BmB,SAAAA,GACrB,MAAO,CACLW,KCVmB,UDWnBX,YD0BSG,SCtBW,SAAAS,GACtB,MAAO,CACLD,KChBoB,WDiBpBC,gBDeWF,CAKblB,GGxBaqB,E,iLAVX,OACE,6BACE,0CACA,6BACA,kBAAC,EAAD,W,GANUJ,a,QCqBHb,EAnBC,WAAwB,IAClCA,EADWM,EAAsB,uDAAd,EAAGY,EAAW,uCAErC,OAAQA,EAAOH,MACb,IFRuB,cESrBf,EAAUkB,EAAOlB,QACjB,MACF,IFVmB,UEWjBA,EAAUM,EAAQY,EAAOd,QACzB,MACF,IFZoB,WEalBJ,EAAUM,EAAQY,EAAOF,WACzB,MACF,QACEhB,EAAUC,SAASkB,sBAfF,oBAekCb,EAGvD,OADAc,sBAjBqB,iBAiBOpB,GACrBA,GCdHqB,EAAQC,YAAYC,GAE1BC,iBACE,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEFI,SAASC,eAAe,W","file":"static/js/main.91dfb254.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { deposit, withdraw } from '../actions/balance';\n\nexport class Wallet extends Component {\n  constructor() {\n    super();\n    this.state = { balance: undefined };\n  }\n\n  updateBalance = event =>\n    this.setState({ balance: parseInt(event.target.value) });\n\n  deposit = () => this.props.deposit(this.state.balance);\n\n  withdraw = () => this.props.withdraw(this.state.balance);\n\n  render() {\n    return (\n      <div>\n        <h3 className=\"balance\">Wallet Balance: {this.props.balance}</h3>\n        <br />\n        <input className=\"input-wallet\" onChange={this.updateBalance}></input>\n        <button className=\"btn-deposit\" onClick={this.deposit}>\n          Deposit\n        </button>\n        <button className=\"btn-withdraw\" onClick={this.withdraw}>\n          Withdraw\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => {\n    return { balance: state };\n  },\n  { deposit, withdraw }\n)(Wallet);\n","import * as constants from './constants';\n\nexport const setBalance = balance => {\n  return {\n    type: constants.SET_BALANCE,\n    balance\n  };\n};\n\nexport const deposit = deposit => {\n  return {\n    type: constants.DEPOSIT,\n    deposit\n  };\n};\n\nexport const withdraw = withdrawal => {\n  return {\n    type: constants.WITHDRAW,\n    withdrawal\n  };\n};\n","export const SET_BALANCE = 'SET BALANCE';\nexport const DEPOSIT = 'DEPOSIT';\nexport const WITHDRAW = 'WITHDRAW';\n","import React, { Component } from 'react';\nimport Wallet from './Wallet';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h2>Loot Check</h2>\n        <hr />\n        <Wallet />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { bake_cookie, read_cookie } from 'sfcookies';\nimport * as constants from '../actions/constants';\n\nconst BALANCE_COOKIE = 'BALANCE_COOKIE';\n\nconst balance = (state = 0, action) => {\n  let balance;\n  switch (action.type) {\n    case constants.SET_BALANCE:\n      balance = action.balance;\n      break;\n    case constants.DEPOSIT:\n      balance = state + action.deposit;\n      break;\n    case constants.WITHDRAW:\n      balance = state - action.withdrawal;\n      break;\n    default:\n      balance = parseInt(read_cookie(BALANCE_COOKIE)) || state;\n  }\n  bake_cookie(BALANCE_COOKIE, balance);\n  return balance;\n};\n\nexport default balance;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport App from './components/App';\nimport rootReducer from './reducers/balance';\n\nconst store = createStore(rootReducer);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}